import boto
from cloudscale import run_test
from cloudscale.deployment_scripts import deploy
from celery import shared_task

@shared_task
def deployment_scripts_task(scenario_path, configuration, config_path, results_dir, logger):
    try:
        provider = configuration.provider

        if not configuration.skip_deployment:
            configuration.test_url = deploy(provider, config_path, results_dir, logger)
            configuration.save()

            logger.log("Showcase is deployed on %s\n" % configuration.test_url)
            logger.log("##############################")
            logger.log("# Running distributed JMeter #")
            logger.log("##############################")

        if not configuration.skip_test:
            jmeter_config_path = write_jmeter_config(configuration.test_url, configuration, config_path, results_dir, logger)
            run_test.run_test(provider, jmeter_config_path, scenario_path, results_dir, logger)

        logger.log("--------------------------------")
        logger.log("Finished", fin=True)
        logger.log("View results in %s" % results_dir)
    except Exception as e:
        import traceback
        logger.log(traceback.format_exc(), fin=True)

def write_jmeter_config(url, configuration, config_path, results_dir, logger):
    filename = '%s/config.jmeter.ini' % results_dir
    fp = open(filename, 'w+')

    cfg = boto.Config(fp=fp)
    section = 'SHOWCASE'
    cfg.add_section(section)
    cfg.set(section, 'autoscalable', 'yes' if configuration.as_is_enabled == True else 'no')
    cfg.set(section, 'host', url)
    cfg.set(section, 'frontend_instances_id', configuration.ec2_instance_identifier)
    cfg.set(section, 'aws_access_key_id', configuration.aws_access_key_id)
    cfg.set(section, 'aws_secret_access_key', configuration.aws_secret_key_id)

    section = 'SCENARIO'
    cfg.add_section(section)
    cfg.set(section, 'num_threads', str(configuration.jmeter_num_threads))
    cfg.set(section, 'duration_in_minutes', str(configuration.jmeter_duration_in_minutes))
    cfg.set(section, 'jmeter_url', configuration.jmeter_url)

    section = 'AWS'
    cfg.add_section(section)
    cfg.set(section, 'aws_access_key_id', configuration.jmeter_aws_access_key)
    cfg.set(section, 'aws_secret_access_key', configuration.jmeter_aws_secret_key)
    cfg.set(section, 'region', configuration.aws_region.abbreviation)
    cfg.set(section, 'availability_zones', configuration.aws_availability_zone.abbreviation)

    section = 'EC2'
    cfg.add_section(section)
    cfg.set(section, 'region', configuration.aws_region.abbreviation)
    cfg.set(section, 'instance_type', configuration.jmeter_instance_type.instance_type)
    cfg.set(section, 'remote_user', configuration.ec2_remote_user)
    cfg.set(section, 'ami_id', configuration.jmeter_ami_id)
    cfg.set(section, 'key_name', configuration.jmeter_key_name)
    cfg.set(section, 'key_pair', '<auto-generated>')

    section = 'RDS'
    cfg.add_section(section)
    identifiers = [configuration.rds_master_identifier]
    identifiers += ['%s%s' % (configuration.rds_slave_identifier, i) for i in xrange(configuration.rds_num_replicas)]
    cfg.set(section, 'identifiers', ",".join(identifiers))

    cfg.write(fp)
    fp.close()
    return filename